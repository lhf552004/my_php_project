#Use an Ubuntu 18.04 base for our staging server
FROM vm/ubuntu:18.04

# To note: Layerfiles create entire VMs, *not* containers!

# Install python
RUN apt-get update && apt-get install -y \
php \
php-cli \
unzip \
php-mysql \
php-mysqli \
mysql-server \
curl \
&& apt-get clean

# Start MySQL service
RUN service mysql start

# Configure MySQL (create database and user)
RUN mysql -e "CREATE DATABASE rms;" \
    && mysql -e "CREATE USER 'testuser'@'localhost' IDENTIFIED BY 'testpassword';" \
    && mysql -e "GRANT ALL PRIVILEGES ON rms.* TO 'testuser'@'localhost';" \
    && mysql -e "FLUSH PRIVILEGES;"
    
# Install Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer


# You could also install & start a database:
# RUN apt-get update && apt-get install postgresql

# This line copies the repository to /root in the runner
COPY . .
RUN ls

# Import secrets
SECRET ENV DB_HOST
SECRET ENV DB_USER
SECRET ENV DB_PASSWORD

# Create the .env file dynamically using LayerCI secrets
RUN echo "DB_HOST=${DB_HOST}" > .env
RUN echo "DB_USER=${DB_USER}" >> .env
RUN echo "DB_PASS=${DB_PASSWORD}" >> .env
RUN echo "API_KEY=${API_KEY}" >> .env

# Allow Composer to run as root in non-interactive mode
ENV COMPOSER_ALLOW_SUPERUSER=1

# Install PHP dependencies
RUN composer install --no-scripts --no-interaction --prefer-dist


# Expose the webserver in the staging server as a secure link.
# Whenever someone clicks the link, we'll load this staging server and forward
# their requests to it.
RUN BACKGROUND php -S 0.0.0.0:8000
EXPOSE WEBSITE http://localhost:8000
